#ifndef WMDF_TIME_H
#define WMDF_TIME_H

namespace wmdf
{
  /* date now available between 1700.01.01 and 2299.12.31 */

#define BASEDAYS	  730485	 /* 2000.01.01 - Annals AD = 730485 */
#define SECONDSPERDAY 86400000.0 /* 24*60*60*1000 = 86400000 */

#define LEAP(y)	((y)%4?0:(y)%100?1:(y)%400?0:1)		  /* is leap year? 1 for true, 0 for false */
#define DURA(y) ((y)*365+(y-1)/4-(y-1)/100+(y-1)/400) /* duration from 2000.01.01 to y.01.01 */

  /*
  ** build inner date/time variable
  */
#define GMINUTE(h,m)	              (h*60+m)
#define GSECOND(h,m,s)	            (h*3600+m*60+s)
#define GTIME(h,m,s,ms)			        (h*3600000+m*60000+s*1000+ms)
#define GMONTH(y,m)		              ((y-2000)*12+m)
#define GDATE(y,m,d)			          (DURA(y)+IYDOFMONTH[LEAP(y)][m]+d-BASEDAYS)
#define GDATETIME(y,m,d,h,u,s,ms)   (GDATE(y,m,d)+GTIME(h,u,s,ms)/SECONDSPERDAY)
#define GWEEK(y,m,d)			          (((y/100)%4*(-2)+5+((y%100)/4+(y%100))%7+MONTHREM[LEAP(y)][m]+d)%7)

  /*
  ** date/time conversion
  */
#define MINUTE2TIME(m) (m*60*1000)
#define SECOND2TIME(s) (s*1000)
#define MONTH2DATE(m)  (GDATE((m+2000*12)/12,(m+2000*12)%12,1))

  /*
  ** day accumulation by month
  */
  static int IYDOFMONTH[2][14] = {{0,0,31,59,90,120,151,181,212,243,273,304,334,365}, /* NOT a leap year */
  {0,0,31,60,91,121,152,182,213,244,274,305,335,366}};/* a leap year */

  /*
  ** MONTH REMinder, used only in LWEEK!
  */
  static int MONTHREM[2][13] = {{0,1,4,4,0,2,5,0,3,6,1,4,6},  /* NOT a leap year */
  {0,0,3,4,0,2,5,0,3,6,1,4,6}}; /* a leap year */

  /*
  ** find the corresponding month and day by Intra-Year Days
  */
  static int IYD2MD[] = {
    101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,////
    116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,////
    216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,/////////
    301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315,////
    316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331,
    401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,////
    416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430,////
    501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515,////
    516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531,
    601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615,////
    616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630,////
    701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715,////
    716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
    801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815,////
    816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
    901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915,////
    916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930,////
    1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,////
    1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,
    1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,////
    1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,////
    1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,////
    1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231
  };

  /*
  ** the last day of year presented by LDATE, from 1699 to 2300
  */
  static int DATEMAP[] = {
    -109573, /*1699*/
    -109208, -108843, -108478, -108113, -107747, -107382, -107017, -106652, -106286, -105921,
    -105556, -105191, -104825, -104460, -104095, -103730, -103364, -102999, -102634, -102269,
    -101903, -101538, -101173, -100808, -100442, -100077, -99712,  -99347,  -98981,  -98616,
    -98251,  -97886,  -97520,  -97155,  -96790,  -96425,  -96059,  -95694,  -95329,  -94964,
    -94598,  -94233,  -93868,  -93503,  -93137,  -92772,  -92407,  -92042,  -91676,  -91311,
    -90946,  -90581,  -90215,  -89850,  -89485,  -89120,  -88754,  -88389,  -88024,  -87659,
    -87293,  -86928,  -86563,  -86198,  -85832,  -85467,  -85102,  -84737,  -84371,  -84006,
    -83641,  -83276,  -82910,  -82545,  -82180,  -81815,  -81449,  -81084,  -80719,  -80354,
    -79988,  -79623,  -79258,  -78893,  -78527,  -78162,  -77797,  -77432,  -77066,  -76701,
    -76336,  -75971,  -75605,  -75240,  -74875,  -74510,  -74144,  -73779,  -73414,  -73049,
    -72684,  -72319,  -71954,  -71589,  -71223,  -70858,  -70493,  -70128,  -69762,  -69397,
    -69032,  -68667,  -68301,  -67936,  -67571,  -67206,  -66840,  -66475,  -66110,  -65745,
    -65379,  -65014,  -64649,  -64284,  -63918,  -63553,  -63188,  -62823,  -62457,  -62092,
    -61727,  -61362,  -60996,  -60631,  -60266,  -59901,  -59535,  -59170,  -58805,  -58440,
    -58074,  -57709,  -57344,  -56979,  -56613,  -56248,  -55883,  -55518,  -55152,  -54787,
    -54422,  -54057,  -53691,  -53326,  -52961,  -52596,  -52230,  -51865,  -51500,  -51135,
    -50769,  -50404,  -50039,  -49674,  -49308,  -48943,  -48578,  -48213,  -47847,  -47482,
    -47117,  -46752,  -46386,  -46021,  -45656,  -45291,  -44925,  -44560,  -44195,  -43830,
    -43464,  -43099,  -42734,  -42369,  -42003,  -41638,  -41273,  -40908,  -40542,  -40177,
    -39812,  -39447,  -39081,  -38716,  -38351,  -37986,  -37620,  -37255,  -36890,  -36525,
    -36160,  -35795,  -35430,  -35065,  -34699,  -34334,  -33969,  -33604,  -33238,  -32873,
    -32508,  -32143,  -31777,  -31412,  -31047,  -30682,  -30316,  -29951,  -29586,  -29221,
    -28855,  -28490,  -28125,  -27760,  -27394,  -27029,  -26664,  -26299,  -25933,  -25568,
    -25203,  -24838,  -24472,  -24107,  -23742,  -23377,  -23011,  -22646,  -22281,  -21916,
    -21550,  -21185,  -20820,  -20455,  -20089,  -19724,  -19359,  -18994,  -18628,  -18263,
    -17898,  -17533,  -17167,  -16802,  -16437,  -16072,  -15706,  -15341,  -14976,  -14611,
    -14245,  -13880,  -13515,  -13150,  -12784,  -12419,  -12054,  -11689,  -11323,  -10958,
    -10593,  -10228,  -9862,   -9497,   -9132,   -8767,   -8401,   -8036,   -7671,   -7306,
    -6940,   -6575,   -6210,   -5845,   -5479,   -5114,   -4749,   -4384,   -4018,   -3653,
    -3288,   -2923,   -2557,   -2192,   -1827,   -1462,   -1096,   -731,    -366,    -1,
    365,     730,     1095,    1460,    1826,    2191,    2556,    2921,    3287,    3652,
    4017,    4382,    4748,    5113,    5478,    5843,    6209,    6574,    6939,    7304,
    7670,    8035,    8400,    8765,    9131,    9496,    9861,    10226,   10592,   10957,
    11322,   11687,   12053,   12418,   12783,   13148,   13514,   13879,   14244,   14609,
    14975,   15340,   15705,   16070,   16436,   16801,   17166,   17531,   17897,   18262,
    18627,   18992,   19358,   19723,   20088,   20453,   20819,   21184,   21549,   21914,
    22280,   22645,   23010,   23375,   23741,   24106,   24471,   24836,   25202,   25567,
    25932,   26297,   26663,   27028,   27393,   27758,   28124,   28489,   28854,   29219,
    29585,   29950,   30315,   30680,   31046,   31411,   31776,   32141,   32507,   32872,
    33237,   33602,   33968,   34333,   34698,   35063,   35429,   35794,   36159,   36524,
    36889,   37254,   37619,   37984,   38350,   38715,   39080,   39445,   39811,   40176,
    40541,   40906,   41272,   41637,   42002,   42367,   42733,   43098,   43463,   43828,
    44194,   44559,   44924,   45289,   45655,   46020,   46385,   46750,   47116,   47481,
    47846,   48211,   48577,   48942,   49307,   49672,   50038,   50403,   50768,   51133,
    51499,   51864,   52229,   52594,   52960,   53325,   53690,   54055,   54421,   54786,
    55151,   55516,   55882,   56247,   56612,   56977,   57343,   57708,   58073,   58438,
    58804,   59169,   59534,   59899,   60265,   60630,   60995,   61360,   61726,   62091,
    62456,   62821,   63187,   63552,   63917,   64282,   64648,   65013,   65378,   65743,
    66109,   66474,   66839,   67204,   67570,   67935,   68300,   68665,   69031,   69396,
    69761,   70126,   70492,   70857,   71222,   71587,   71953,   72318,   72683,   73048,
    73413,   73778,   74143,   74508,   74874,   75239,   75604,   75969,   76335,   76700,
    77065,   77430,   77796,   78161,   78526,   78891,   79257,   79622,   79987,   80352,
    80718,   81083,   81448,   81813,   82179,   82544,   82909,   83274,   83640,   84005,
    84370,   84735,   85101,   85466,   85831,   86196,   86562,   86927,   87292,   87657,
    88023,   88388,   88753,   89118,   89484,   89849,   90214,   90579,   90945,   91310,
    91675,   92040,   92406,   92771,   93136,   93501,   93867,   94232,   94597,   94962,
    95328,   95693,   96058,   96423,   96789,   97154,   97519,   97884,   98250,   98615,
    98980,   99345,   99711,   100076,  100441,  100806,  101172,  101537,  101902,  102267,
    102633,  102998,  103363,  103728,  104094,  104459,  104824,  105189,  105555,  105920,
    106285,  106650,  107016,  107381,  107746,  108111,  108477,  108842,  109207,  109572,
    109931  /*2300*/
  };

  /***************************************************
  **  These following mots are moved from llex.c!!  **
  ****************************************************
  /*
  ** check date/time
  */
#define check_minute(h, mm)				  ((0<=(h)&&(h)<=99)&&(0<=(mm)&&(mm)<=59))
#define check_second(h, mm, s)			(check_minute((h),(mm))&&(0<=(s)&&(s)<=59))
#define check_time(h, mm, s, ms)		(check_second((h),(mm),(s))&&(0<=(ms)&&(ms)<=999))
#define check_month(y, m)				    ((1700<=(y)&&(y)<=2299)&&(0<(m)&&(m)<=12))
#define check_date(y, m, d)				  (check_month((y),(m))&&(0<(d)&&(d)<=days_of_month[LEAP(y)][(m)-1]))
#define check_datetime(y,m,d,h,mm,s,ms) (check_date((y),(m),(d))&&check_time((h),(mm),(s),(ms)))

  /*
  ** day per month
  */
  static int days_of_month[2][12] = {{31,28,31,30,31,30,31,31,30,31,30,31}, /* NOT a leap year */
  {31,29,31,30,31,30,31,31,30,31,30,31}};/* a leap year */
}

#endif //wmdf_time_h
